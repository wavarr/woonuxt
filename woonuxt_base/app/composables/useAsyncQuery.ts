import { ref } from '#imports';

/**
 * Simple implementation of useAsyncQuery that uses the built-in GQL functions
 * @param queryName The name of the GraphQL query
 * @param variables Variables to pass to the query
 * @returns Object with data, error, and pending refs
 */
export function useAsyncQuery(queryName: string, variables: Record<string, any> = {}) {
  const data = ref<any>(null);
  const error = ref<Error | null>(null);
  const pending = ref(true);

  // Use the global GQL function that's auto-generated by nuxt-graphql-client
  // @ts-ignore - The GQL functions are dynamically generated
  const gqlFn = global[`Gql${queryName.charAt(0).toUpperCase() + queryName.slice(1)}`];
  
  if (!gqlFn) {
    console.error(`GQL function not found for query: ${queryName}`);
    error.value = new Error(`GQL function not found for query: ${queryName}`);
    pending.value = false;
    return { data, error, pending };
  }

  // Execute the query
  gqlFn(variables)
    .then((result: any) => {
      data.value = result;
      pending.value = false;
    })
    .catch((err: Error) => {
      console.error(`Error in useAsyncQuery for ${queryName}:`, err);
      error.value = err;
      pending.value = false;
    });

  // Return refs that will be updated when the query completes
  return {
    data,
    error,
    pending,
    refresh: () => useAsyncQuery(queryName, variables)
  };
} 
